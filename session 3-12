public class MatrixAdditionDemo {

    public static void main(String[] args) {
        // Define matrices for T1 and T2
        int[][] matrix1 = {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
        };

        int[][] matrix2 = {
                {9, 8, 7},
                {6, 5, 4},
                {3, 2, 1}
        };

        // Create threads T1 and T2
        Thread t1 = new Thread(new MatrixThread("Thread 1", matrix1));
        Thread t2 = new Thread(new MatrixThread("Thread 2", matrix2));

        // Start threads T1 and T2
        t1.start();
        t2.start();

        try {
            t1.join(); // Wait for T1 to complete
            t2.join(); // Wait for T2 to complete
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Create thread T3
        Thread t3 = new Thread(new MatrixAdditionThread("Thread 3", ((MatrixThread) t1).getResultMatrix(), ((MatrixThread) t2).getResultMatrix()));
        // Start thread T3
        t3.start();
    }
}

class MatrixThread implements Runnable {
    private String name;
    private int[][] matrix;
    private int[][] resultMatrix;

    public MatrixThread(String name, int[][] matrix) {
        this.name = name;
        this.matrix = matrix;
    }

    @Override
    public void run() {
        System.out.println(name + " processing matrix:");
        printMatrix(matrix);
        resultMatrix = processMatrix(matrix);
        System.out.println(name + " finished processing.");
    }

    public int[][] getResultMatrix() {
        return resultMatrix;
    }

    private int[][] processMatrix(int[][] matrix) {
        // Some processing, for demonstration, we simply return the matrix
        return matrix;
    }

    private void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int element : row) {
                System.out.print(element + " ");
            }
            System.out.println();
        }
    }
}

class MatrixAdditionThread implements Runnable {
    private String name;
    private int[][] matrix1;
    private int[][] matrix2;

    public MatrixAdditionThread(String name, int[][] matrix1, int[][] matrix2) {
        this.name = name;
        this.matrix1 = matrix1;
        this.matrix2 = matrix2;
    }

    @Override
    public void run() {
        System.out.println(name + " waiting for Thread 1 and Thread 2 to complete processing...");

        // Wait for Thread 1 and Thread 2 to complete
        try {
            Thread.sleep(2000); // Simulate waiting for Thread 1 and Thread 2 to complete
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println(name + " acquired matrices from Thread 1 and Thread 2:");
        System.out.println("Matrix 1:");
        printMatrix(matrix1);
        System.out.println("Matrix 2:");
        printMatrix(matrix2);

        // Perform matrix addition
        int[][] resultMatrix = addMatrices(matrix1, matrix2);
        System.out.println(name + " completed matrix addition:");
        printMatrix(resultMatrix);
    }

    private int[][] addMatrices(int[][] matrix1, int[][] matrix2) {
        int rows = matrix1.length;
        int cols = matrix1[0].length;
        int[][] result = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = matrix1[i][j] + matrix2[i][j];
            }
        }

        return result;
    }

    private void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int element : row) {
                System.out.print(element + " ");
            }
            System.out.println();
        }
    }
}
